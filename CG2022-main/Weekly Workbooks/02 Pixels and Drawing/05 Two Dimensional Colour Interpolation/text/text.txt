In the earlier grayscale interpolation task, we interpolated a single floating point value in just one dimension (the x axis). In this next task we will interpolate three-element float values (RGB colours) in _two_ dimensions (x _and_ y). Click on the blue button above to view an animation (and audio narration) that provides more details about interpolating RGB colour values. Once you are confident with the concepts covered, implement 2D RGB interpolation in order to produce the effect shown in the image below. To help you in this task, you can use the `interpolateThreeElementValues` function that you wrote in the previous task. It might seem a bit strange to use a vector (`vec3`) to store and manipulate a colour (rather than a specifically designed `Colour` class). C++ programmers do a lot of unusual things with their data types, so we should probably try to get used to this kind of thing !
